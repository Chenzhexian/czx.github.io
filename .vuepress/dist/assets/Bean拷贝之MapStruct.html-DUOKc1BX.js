import{_ as e,r as o,o as c,c as l,a as n,b as a,d as t,e as p}from"./app-CzSBTTj3.js";const i={},u=p(`<h1 id="bean-拷贝之-mapstruct" tabindex="-1"><a class="header-anchor" href="#bean-拷贝之-mapstruct"><span>Bean 拷贝之 MapStruct</span></a></h1><blockquote><p>大家好，今天我给大家带来一个 Bean 拷贝的高效工具，MapSrtuct 。有人会问 MapSturct 是什么？简单来说，MapStruct 就是一个 Java Bean 的映射器，我们只需要在一个 XXXStructMapper 的接口中定义好方法，MapStruct 就会在编译的时候生成相应的实现类，这个实现类中包含了具体的映射代码，极大地提高了我们编码的效率，省去了大量的模板代码。</p></blockquote><h2 id="传统写法带来的困扰" tabindex="-1"><a class="header-anchor" href="#传统写法带来的困扰"><span>传统写法带来的困扰</span></a></h2><p>假如没有使用 MapStruct 的话，当我们需要把 DO 对象转成一个 DTO 对象时，我们需要这样做。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ArticleDTO</span> <span class="token function">toDto</span><span class="token punctuation">(</span><span class="token class-name">ArticleDO</span> articleDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>articleDO <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ArticleDTO</span> articleDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setArticleId</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setArticleType</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getArticleType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setShortTitle</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getShortTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setSummary</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setCover</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getPicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setSourceType</span><span class="token punctuation">(</span><span class="token class-name">SourceTypeEnum</span><span class="token punctuation">.</span><span class="token function">formCode</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setSourceUrl</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getSourceUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setLastUpdateTime</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getUpdateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setOfficalStat</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getOfficalStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setToppingStat</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getToppingStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setCreamStat</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getCreamStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置类目id</span>
    articleDTO<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CategoryDTO</span><span class="token punctuation">(</span>articleDO<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> articleDTO<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是需要批量进行转化的话，这个时候还需要遍历进行批量转化。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">toArticleDtoList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArticleDO</span><span class="token punctuation">&gt;</span></span> articleDOS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> articleDOS<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ArticleConverter</span><span class="token operator">::</span><span class="token function">toDto</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),r=n("br",null,null,-1),k={href:"https://juejin.cn/post/7012279747526787080",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m={href:"https://cloud.tencent.com/developer/article/1522266",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),g={href:"https://juejin.cn/post/7035161765948162078",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),S=n("img",{src:"https://czxcab.cn/file/emoji/1.jpg",alt:"图片"},null,-1),f=p(`<p>那有什么简单的解决方法，那就是我们今天的主角， MapStruct 了，接下来我们简单使用一下 MapStruct演示一下。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleStructMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">ArticleStructMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">ArticleStructMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ArticleDTO</span> <span class="token function">toDTO</span><span class="token punctuation">(</span><span class="token class-name">ArticleDO</span> <span class="token keyword">do</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义了一个接口 ArticleStructMapper，该接口的主要作用是将 ArticleDO 对象转换为 ArticleDTO 对象。</p><p>让我们一步步地分析代码：</p><blockquote><ol><li><a href="">@Mapper</a></li></ol></blockquote><p>这是 MapStruct 的核心注解之一。它标记了这个接口为一个映射器，并告诉 MapStruct 的注解处理器在编译时为此接口生成实现。</p><blockquote><ol start="2"><li><strong>INSTANCE 常量</strong></li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArticleStructMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">ArticleStructMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Mappers.getMapper 是 MapStruct 提供的一个工具方法，用于在不使用 Spring 或其他依赖注入框架的情况下获取映射器的实例。</p><blockquote><ol start="3"><li><strong>toDTO 方法</strong>：</li></ol></blockquote><p>这个方法定义了一个转换。这个大家都懂，我就不做过多的赘述了。</p><h2 id="mapstruct-的用法" tabindex="-1"><a class="header-anchor" href="#mapstruct-的用法"><span>MapStruct 的用法</span></a></h2><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h3><p>在 pom.xml 文件中引入 MapStruct 的 Maven 坐标,这里需要注意，引入 guava 的时候需要注意版本冲突问题，尽量引入大于 19.0 以上的版本，不然可能会报错。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入 mapstruct <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>mapstruct<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>mapstruct<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
 	<span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.5</span><span class="token number">.5</span><span class="token punctuation">.</span>Final<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>mapstruct<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>mapstruct<span class="token operator">-</span>processor<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
	 <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.5</span><span class="token number">.5</span><span class="token punctuation">.</span>Final<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的作用如下：</p><ol><li><strong>org.mapstruct:mapstruct</strong>：</li></ol><ul><li>MapStruct 的核心库。它提供了 MapStruct 所需的主要注解和工具方法，例如 @Mapper, @Mapping 等注解以及 Mappers.getMapper() 方法。</li><li>在运行时，这个库是必需的，生成的映射代码会依赖它。</li></ul><ol start="2"><li><strong>org.mapstruct:mapstruct-processor</strong>：</li></ol><ul><li>MapStruct 的注解处理器。它在编译时生成具体的映射实现代码。</li><li>compile 作用域，意味着它只在编译时被使用。</li><li>当你编译一个使用了 MapStruct 注解的项目时，注解处理器会检测你的代码，然后为你的 @Mapper 注解的接口或抽象类生成实现。</li></ul><h3 id="定义映射器接口" tabindex="-1"><a class="header-anchor" href="#定义映射器接口"><span>定义映射器接口</span></a></h3><p>像前面大家看到的 ArticleStructMapper 接口，我们稍微来一个复杂的。这里需要注意导入的 Mapper，是 MapStruct 的 Mapper ，而不是 MyBatis 下的 Mapper。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ColumnStructMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">ColumnStructMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">ColumnStructMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * ColumnInfoDO to ColumnDTO
     * <span class="token keyword">@param</span> <span class="token parameter">columnInfoDO</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token comment">// sources 是参数，target 是目标</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;columnId&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;columnName&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;column&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// Date 转 Long</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;publishTime&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(columnInfoDO.getPublishTime().getTime())&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;freeStartTime&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(columnInfoDO.getFreeStartTime().getTime())&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;freeEndTime&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(columnInfoDO.getFreeEndTime().getTime())&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">ColumnDTO</span> <span class="token function">infotoDto</span><span class="token punctuation">(</span><span class="token class-name">ColumnInfoDO</span> columnInfoDO<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ColumnDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">infoToDtos</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ColumnInfoDO</span><span class="token punctuation">&gt;</span></span> columnInfoDOs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;column&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;columnName&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// Long 转 Date</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;freeStartTime&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(new java.util.Date(req.getFreeStartTime()))&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;freeEndTime&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(new java.util.Date(req.getFreeEndTime()))&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">ColumnInfoDO</span> <span class="token function">toDo</span><span class="token punctuation">(</span><span class="token class-name">ColumnReq</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码定义了如何在 ColumnInfoDO 和 ColumnDTO 之间转换，以及如何从 ColumnReq 转换到 ColumnInfoDO。我将为你分析其每一部分：</p><ol><li><strong>infotoDto 方法</strong></li></ol><ul><li>使用 @Mapping 注解来指定属性映射规则。例如，将 ColumnInfoDO 的 id 属性映射到 ColumnDTO 的 columnId 属性。</li><li>使用 expression 属性来定义更复杂的属性转换，例如从 Date 对象获取时间戳。</li></ul><ol start="2"><li><strong>infoToDtos 方法</strong></li></ol><p>显示了 MapStruct 如何轻松地转换对象列表。此方法将 List&lt;ColumnInfoDO&gt; 转换为 List&lt;ColumnDTO&gt;。因为单个对象的映射已经在 infotoDto 方法中定义，所以这里不需要额外的注解。</p><ol start="3"><li><strong>toDo 方法</strong></li></ol><p>对于 freeStartTime 和 freeEndTime，因为它们在 ColumnReq 中是 Long 类型的时间戳，而在ColumnInfoDO 中是 Date 类型，所以使用了 expression 属性进行转换。</p>`,30),M={id:"mapping-注解",tabindex:"-1"},D={class:"header-anchor",href:"#mapping-注解"},h={href:"https://www.yuque.com/Mapping",target:"_blank",rel:"noopener noreferrer"},q=p(`<p>这里重点说一下 @Mapping 注解，当两个对象中的字段名或者字段类型不一致的时候，就需要该注解来进行转换。</p><p>换句话说，如果对象的字段名/类型完全一样，就完全不需要该注解，Mapstruct 会自动拷贝。</p><p>比如说 SimpleSource 和 SimpleDestination 的字段名和类型完全一样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleSource</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleDestination</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就只需要定义映射器 SimpleSourceDestinationMapper 就行了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SimpleSourceDestinationMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleSourceDestinationMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">SimpleSourceDestinationMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SimpleDestination</span> <span class="token function">sourceToDestination</span><span class="token punctuation">(</span><span class="token class-name">SimpleSource</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SimpleSource</span> <span class="token function">destinationToSource</span><span class="token punctuation">(</span><span class="token class-name">SimpleDestination</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用的时候，可以这样 SimpleSourceDestinationMapper.INSTANCE 进行转换。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">QuickForumApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleSourceDestinationMapperIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenSourceToDestination_whenMaps_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleSource</span> simpleSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        simpleSource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;老王&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        simpleSource<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&quot;是条狗&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDestination</span> destination <span class="token operator">=</span> <span class="token class-name">SimpleSourceDestinationMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">sourceToDestination</span><span class="token punctuation">(</span>simpleSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span>simpleSource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> destination<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span>simpleSource<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> destination<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),j={href:"https://www.yuque.com/Mapping",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>@Mapping 是 MapStruct 中用于定义字段之间映射规则的注解。它非常灵活，能够处理各种复杂的映射情况。以下是 @Mapping 的一些常见用法：</p><ol><li><strong>基本映射</strong>：</li></ol><p>通过指定 source 和 target 来映射源对象的属性到目标对象的属性。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;fullName&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将源对象的 name 属性映射到目标对象的 fullName 属性。</p><ol start="2"><li><strong>常量映射</strong></li></ol><p>可以将目标字段设置为固定的常量值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">&quot;ACTIVE&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会将目标对象的 status 属性设置为 &quot;ACTIVE&quot;。</p><ol start="3"><li><strong>默认值</strong></li></ol><p>当源属性为 null 时，可以为目标属性设置默认值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;total&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 count 为 null，则 total 将被设置为 &quot;0&quot;。</p><ol start="4"><li><strong>表达式</strong></li></ol><p>对于需要更复杂的转换逻辑，可以使用 Java 表达式。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(source.getDate().getTime())&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><strong>日期格式</strong></li></ol><p>对于日期和字符串之间的映射，可以指定日期格式。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;date&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;formattedDate&quot;</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会将 Date 对象转换为 &quot;yyyy-MM-dd&quot; 格式的字符串。</p><ol start="6"><li><strong>条件映射</strong></li></ol><p>使用 qualifiedByName 或 qualifiedBy 来指定一个条件方法或注解，这些方法/注解决定是否应该进行映射。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">&quot;specialConverter&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，映射会使用名为 specialConverter 的方法进行。</p><ol start="7"><li><strong>嵌套映射</strong></li></ol><p>当处理嵌套对象时，可以使用点表示法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;address.street&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;streetName&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会将源对象中的 address 对象的 street 属性映射到目标对象的 streetName 属性。</p><ol start="8"><li><strong>忽略映射</strong></li></ol><p>在某些情况下，可能不希望特定的属性被映射，可以使用 ignore。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;internalId&quot;</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会确保目标对象的 internalId 属性不被设置。</p><ol start="9"><li><strong>使用自定义映射方法</strong></li></ol><p>可以指定自定义方法来进行映射。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">&quot;customMethod&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="spring-依赖注入" tabindex="-1"><a class="header-anchor" href="#spring-依赖注入"><span>Spring 依赖注入</span></a></h3><p>截止到目前为止，我们一直在使用 Mappers.getMapper 来获取映射器 INSTANCE。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ColumnStructMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">ColumnStructMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38),T={href:"https://www.yuque.com/Mapper",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel <span class="token operator">=</span> <span class="token string">&quot;spring&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ColumnStructMapper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们在使用映射器的时候，可以直接通过 @Autowired 注解来注入 ColumnStructMapper 对象，然后就可以直接这样使用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ColumnStructMapper</span> columnStructMapper<span class="token punctuation">;</span>
<span class="token class-name">ColumnInfoDO</span> columnInfoDO <span class="token operator">=</span> columnStructMapper<span class="token punctuation">.</span><span class="token function">toDo</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就不需要在映射器接口中添加 INSTANCE 了。</p><h2 id="mapstruct-插件" tabindex="-1"><a class="header-anchor" href="#mapstruct-插件"><span>MapStruct 插件</span></a></h2><p>如果你在 Intellij IDEA 中安装 MapStruct 插件的话，直接在插件市场搜 MapStruct 关键字就可以了。</p><p><img src="https://czxcab.cn/file/docs/mapStruct1.jpg" alt=""></p><p>安装完成后，可以直接在 <a href="">@Mapper</a> 接口和它的实现类之间快速导航。</p><p><img src="https://czxcab.cn/file/docs/mapStruct2.jpg" alt=""></p><p>比如说点击上图中的跳转小图标，就可以直接到实现类。</p><p><img src="https://czxcab.cn/file/docs/mapStruct3.jpg" alt=""></p><h2 id="mapstruct-的背后原理" tabindex="-1"><a class="header-anchor" href="#mapstruct-的背后原理"><span><strong>MapStruct 的背后原理</strong></span></a></h2><p>Java 程序执行的过程，是由编译器先把 java 文件编译成 class 字节码文件，然后由 JVM 去解释执行 class 文件。</p><p>Mapstruct 正是在 java 文件到 class 这一步帮我们实现了转换方法，即做了预处理，提前编译好文件，用过 lombok 的小伙伴一定能理解其好处。</p><p>首先我们来看最简单的 SimpleSourceDestinationMapper，它是这样定义的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SimpleSourceDestinationMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleSourceDestinationMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">SimpleSourceDestinationMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">SimpleDestination</span> <span class="token function">sourceToDestination</span><span class="token punctuation">(</span><span class="token class-name">SimpleSource</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">SimpleSource</span> <span class="token function">destinationToSource</span><span class="token punctuation">(</span><span class="token class-name">SimpleDestination</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>其在编译后会生成两个文件 SimpleSourceDestinationMapper 和 SimpleSourceDestinationMapperImpl。</p><p><img src="https://czxcab.cn/file/docs/mapStruct4.jpg" alt=""></p><p>通过终端可以看到 class 文件的后缀。</p><p><img src="https://czxcab.cn/file/docs/mapStruct5.jpg" alt=""></p><p>OK，我们直接来看 class 文件的内容，当然是反编译后的，Intellij IDEA 可以直接打开，先是 SimpleSourceDestinationMapper。</p><p><img src="https://czxcab.cn/file/docs/mapStruct6.jpg" alt=""></p><p>再来看实现类 SimpleSourceDestinationMapperImpl，我们直接贴反编译后的代码。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleSourceDestinationMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleSourceDestinationMapper</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SimpleSourceDestinationMapperImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SimpleDestination</span> <span class="token function">sourceToDestination</span><span class="token punctuation">(</span><span class="token class-name">SimpleSource</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">SimpleDestination</span> simpleDestination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            simpleDestination<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            simpleDestination<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> simpleDestination<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SimpleSource</span> <span class="token function">destinationToSource</span><span class="token punctuation">(</span><span class="token class-name">SimpleDestination</span> destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>destination <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">SimpleSource</span> simpleSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            simpleSource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>destination<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            simpleSource<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>destination<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> simpleSource<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实内容和我们直接去写 Converter 是一样的，通过 new 创建一个对象，然后通过 set 方法进行赋值。</p><p>如果是 @Mapper(componentModel = &quot;spring&quot;) 的话，在生成的时候，会带上 <a href="">@Component</a> 注解。 <br><img src="https://czxcab.cn/file/docs/mapStruct7.jpg" alt=""></p><blockquote><p>使用 <a href="">@Component</a> 注解的类将会在 Spring 的组件扫描期间被检测并注册到 ApplicationContext 中，从而使其成为一个 Spring Bean。</p></blockquote><p>这也是为什么我们可以直接通过 <a href="">@Autowired</a> 注解获得映射器对象的原因。</p><p>由于 MapStruct 并不是在运行时使用 Java 反射来实现对象之间的映射，而是在编译时生成明确、简单、易于跟踪的普通 Java 代码。这意味着它的执行速度更快，因为没有运行时的反射开销，并且可以避免与反射相关的各种问题。</p>`,29);function O(C,_){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[a("这样的代码如果只是一个方法可能还好，但是如果写多了，你就会发现代码不是很优雅，而且每次写代码量还巨大，虽然有插件可以帮你写，但是感觉还是不好，这个时候，肯定有人会说用 BeanUtils，这个时候我会给你大大的一巴掌，主要是 BeeanUtils 其可能会踩一些坑，你可能把握不是很好，这里我找了一些关于 BeanUtils 的一些文章，感兴趣的同学可以一起看看："),r,a("Spring的BeanUtils.copyProperties()避坑指南："),n("a",k,[a("https://juejin.cn/post/7012279747526787080"),t(s)]),d,a("几个 BeanUtils 中的坑，千万别踩！"),n("a",m,[a("https://cloud.tencent.com/developer/article/1522266"),t(s)]),v,a("SpringBoot 整合mapstruct|赶紧丢掉BeanUtils吧："),n("a",g,[a("https://juejin.cn/post/7035161765948162078"),t(s)]),b,S]),f,n("h3",M,[n("a",D,[n("span",null,[n("a",h,[a("@Mapping"),t(s)]),a(" 注解")])])]),q,n("p",null,[a("OK，回到 "),n("a",j,[a("@Mapping"),t(s)]),a(" 注解。")]),y,n("p",null,[a("如果是在 Spring 环境下，还可以在 "),n("a",T,[a("@Mapper"),t(s)]),a(' 注解中添加 componentModel = "spring" 参数来告诉 MapStruct 在生成映射实现类的时候，提供 Spring 依赖注入。')]),w])}const x=e(i,[["render",O],["__file","Bean拷贝之MapStruct.html.vue"]]),N=JSON.parse('{"path":"/docs/knowledgeShard/Bean%E6%8B%B7%E8%B4%9D%E4%B9%8BMapStruct.html","title":"MapStruct","lang":"zh-CN","frontmatter":{"title":"MapStruct"},"headers":[{"level":2,"title":"传统写法带来的困扰","slug":"传统写法带来的困扰","link":"#传统写法带来的困扰","children":[]},{"level":2,"title":"MapStruct 的用法","slug":"mapstruct-的用法","link":"#mapstruct-的用法","children":[{"level":3,"title":"引入依赖","slug":"引入依赖","link":"#引入依赖","children":[]},{"level":3,"title":"定义映射器接口","slug":"定义映射器接口","link":"#定义映射器接口","children":[]},{"level":3,"title":"@Mapping 注解","slug":"mapping-注解","link":"#mapping-注解","children":[]},{"level":3,"title":"Spring 依赖注入","slug":"spring-依赖注入","link":"#spring-依赖注入","children":[]}]},{"level":2,"title":"MapStruct 插件","slug":"mapstruct-插件","link":"#mapstruct-插件","children":[]},{"level":2,"title":"MapStruct 的背后原理","slug":"mapstruct-的背后原理","link":"#mapstruct-的背后原理","children":[]}],"git":{"updatedTime":1715061248000,"contributors":[{"name":"czx","email":"2504058202@qq.com","commits":1}]},"filePathRelative":"docs/knowledgeShard/Bean拷贝之MapStruct.md"}');export{x as comp,N as data};
