import{_ as n,o as s,c as a,e as t}from"./app-CzSBTTj3.js";const p={},e=t(`<h1 id="后端如何编写单元测试" tabindex="-1"><a class="header-anchor" href="#后端如何编写单元测试"><span>后端如何编写单元测试？</span></a></h1><p>很多初学编程的同学都会认为 “程序员的工作只有开发新功能，功能做完了就完事儿”。但其实不然，保证程序的正常运行、提高程序的稳定性和质量也是程序员的核心工作。</p><h2 id="什么是单元测试" tabindex="-1"><a class="header-anchor" href="#什么是单元测试"><span>什么是单元测试？</span></a></h2><p>单元测试（Unit Testing，简称 UT）是软件测试的一种，通常由开发者编写测试代码并运行。相比于其他的测试类型（比如系统测试、验收测试），它关注的是软件的 <strong>最小</strong> 可测试单元。</p><p>什么意思呢？</p><p>假如我们要实现用户注册功能，可能包含很多个子步骤，比如：</p><ol><li>校验用户输入是否合法</li><li>校验用户是否已注册</li><li>向数据库中添加新用户</li></ol><p>其中，每个子步骤可能都是一个小方法。如果我们要保证用户注册功能的正确可用，那么就不能只测试注册成功的情况，而是要尽量将每个子步骤都覆盖到，分别针对每个小方法做测试。比如输入各种不同的账号密码组合来验证 “校验用户输入是否合法” 这一步骤在成功和失败时的表现是否符合预期。</p><p>同理，如果我们要开发一个很复杂的系统，可能包含很多小功能，每个小功能都是一个单独的类，我们也需要针对每个类编写单元测试。因为只有保证每个小功能都是正确的，整个复杂的系统才能正确运行。</p><p>单元测试的几个核心要点是：</p><ol><li>最小化测试范围：单元测试通常只测试代码的一个非常小的部分，以确保测试的简单和准确。</li><li>自动化：单元测试应该是自动化的，开发人员可以随时运行它们来验证代码的正确性，特别是在修改代码后。而不是每次都需要人工去检查。</li><li>快速执行：每个单元测试的执行时间不能过长，应该尽量做到轻量、有利于频繁执行。</li><li>独立性：每个单元测试应该独立于其他测试，不依赖于外部系统或状态，以确保测试的可靠性和可重复性。</li></ol><h2 id="为什么需要单元测试" tabindex="-1"><a class="header-anchor" href="#为什么需要单元测试"><span>为什么需要单元测试？</span></a></h2><p>通过编写和运行单元测试，开发者能够快速验证代码的各个部分是否按照预期工作，有利于保证系统功能的正确可用，这是单元测试的核心作用。</p><p>此外，单元测试还有很多好处，比如：</p><p>1）改进代码：编写单元测试的过程中，开发者能够再次审视业务流程和功能的实现，更容易发现一些代码上的问题。比如将复杂的模块进一步拆解为可测试的单元。</p><p>2）利于重构：如果已经编写了一套可自动执行的单元测试代码，那么每次修改代码或重构后，只需要再自动执行一遍单元测试，就知道修改是否正确了，能够大幅提高效率和项目稳定性。</p><p>3）文档沉淀：编写详细的单元测试本身也可以作为一种文档，说明代码的预期行为。</p><p>所以无论是后端还是前端程序员，都建议把编写单元测试当做一种习惯，真的能够有效提升自己的编码质量。</p><h2 id="如何编写单元测试" tabindex="-1"><a class="header-anchor" href="#如何编写单元测试"><span>如何编写单元测试？</span></a></h2><p>以 Java 开发为例，我们来学习如何编写单元测试。</p><p>Java 开发中，最流行的单元测试框架当属 JUnit 了，它提供了一系列的类和方法，可以帮助我们快速检验代码的行为。</p><h3 id="_1、引入-junit" tabindex="-1"><a class="header-anchor" href="#_1、引入-junit"><span>1、引入 JUnit</span></a></h3><p>首先我们要在项目中引入 JUnit，演示 2 种方式：</p><h4 id="maven-项目引入" tabindex="-1"><a class="header-anchor" href="#maven-项目引入"><span>Maven 项目引入</span></a></h4><p>在 pom.xml 文件中引入 JUnit 4 的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="spring-boot-项目引入" tabindex="-1"><a class="header-anchor" href="#spring-boot-项目引入"><span>Spring Boot 项目引入</span></a></h4><p>如果在 Spring Boot 中使用 JUnit 单元测试，直接引入 spring-boot-starter-test 包即可：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后会自动引入 JUnit Jupiter，它是 JUnit 5（新版本）的一部分，提供了全新的编写和执行单元测试的方式，更灵活易用。不过学习成本极低，会用 JUnit 4，基本就会用 JUnit Jupiter。</p><h3 id="_2、编写单元测试" tabindex="-1"><a class="header-anchor" href="#_2、编写单元测试"><span>2、编写单元测试</span></a></h3><p>编写一个单元测试通常包括三个步骤：准备测试数据、执行要测试的代码、验证结果。</p><p>一般来说，每个类对应一个单元测试类，每个方法对应一个单元测试方法。</p><h4 id="编写-junit-单元测试" tabindex="-1"><a class="header-anchor" href="#编写-junit-单元测试"><span>编写 JUnit 单元测试</span></a></h4><p>比如我们要测试一个计算器的求和功能，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// 通过 Test 注解标识测试方法</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 准备测试数据</span>
        <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 执行要测试的代码</span>
        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 验证结果</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的 Assert 类是关键，提供了很多断言方法，比如 assertEquals（是否相等）、assertNull（是否为空）等，用来对比程序实际输出的值和我们预期的值是否一致。</p><p>如果结果正确，会看到如下输出：</p><p><img src="https://czxcab.cn/file/docs/unit1.jpg" alt=""></p><p>如果结果错误，输出如下，能够清晰地看到执行结果的差异：</p><p><img src="https://czxcab.cn/file/docs/unit2.jpg" alt=""></p><h4 id="spring-boot-项目单测" tabindex="-1"><a class="header-anchor" href="#spring-boot-项目单测"><span>Spring Boot 项目单测</span></a></h4><p>如果是 Spring Boot 项目，我们经常需要对 Mapper 和 Service Bean 进行测试，则需要使用 <code>@SpringBootTest</code> 注解来标识单元测试类，以开启对依赖注入的支持。</p><p>以测试用户注册功能为例，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">userRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 准备数据</span>
        <span class="token class-name">String</span> userAccount <span class="token operator">=</span> <span class="token string">&quot;yupi&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> userPassword <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> checkPassword <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行测试</span>
        <span class="token keyword">long</span> result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">userRegister</span><span class="token punctuation">(</span>userAccount<span class="token punctuation">,</span> userPassword<span class="token punctuation">,</span> checkPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 验证结果</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 再准备一组数据，重复测试流程</span>
        userAccount <span class="token operator">=</span> <span class="token string">&quot;yu&quot;</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">userRegister</span><span class="token punctuation">(</span>userAccount<span class="token punctuation">,</span> userPassword<span class="token punctuation">,</span> checkPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、生成测试报告" tabindex="-1"><a class="header-anchor" href="#_3、生成测试报告"><span>3、生成测试报告</span></a></h3><p>如果系统的单元测试数量非常多（比如 1000 个），那么只验证某个单元测试用例是否正确、查看单个结果是不够的，我们需要一份全面完整的单元测试报告，便于查看单元测试覆盖度、评估测试效果和定位问题。</p><p><strong>测试覆盖度</strong> 是衡量测试过程中被测试到的代码量的一个指标，一般情况下越高越好。测试覆盖度 100% 表示整个系统中所有的方法和关键语句都被测试到了。</p><p>下面推荐 2 种生成单元测试报告的方法。</p><h4 id="使用-idea-生成单测报告" tabindex="-1"><a class="header-anchor" href="#使用-idea-生成单测报告"><span>使用 IDEA 生成单测报告</span></a></h4><p>直接在 IDEA 开发工具中选择 <code>Run xxx with Coverage</code> 执行单元测试类：</p><p><img src="https://czxcab.cn/file/docs/unit3.jpg" alt=""></p><p>然后就能看到测试覆盖度报告了，如下图：</p><p><img src="https://czxcab.cn/file/docs/unit4.jpg" alt=""></p><p>显然 Main 方法没有被测试到，所以显示 0%。</p><p>除了在开发工具中查看测试报告外，还可以导出报告为 HTML 文档：</p><p><img src="https://czxcab.cn/file/docs/unit5.jpg" alt=""></p><p>导出后，会得到一个 HTML 静态文件目录，打开 <code>index.html</code> 就能在浏览器中查看更详细的单元测试报告了：</p><p><img src="https://czxcab.cn/file/docs/unit6.jpg" alt=""></p><p>这种方式简单灵活，不用安装任何插件，比较推荐大家日常学习使用。</p><h4 id="使用-jacoco-生成单测报告" tabindex="-1"><a class="header-anchor" href="#使用-jacoco-生成单测报告"><span>使用 jacoco 生成单测报告</span></a></h4><p>JaCoCo 是一个常用的 Java 代码覆盖度工具，能够自动根据单元测试执行结果生成详细的单测报告。</p><p>它的用法也很简单，推荐按照官方文档中的步骤使用。</p><p>官方文档指路：https://www.eclemma.org/jacoco/trunk/doc/maven.html</p><p>首先在 Maven 的 pom.xml 文件中引入：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jacoco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jacoco-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.8.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，只引入 JaCoCo 插件还是不够的，我们通常希望在执行单元测试后生成报告，所以还要增加 <code>executions</code> 执行配置，示例代码如下：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jacoco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jacoco-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.8.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>com/**/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>pre-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>prepare-agent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>post-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>report<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行 Maven 的 test 命令进行单元测试：</p><p><img src="https://czxcab.cn/file/docs/unit7.jpg" alt=""></p><p>测试结束后，就能够在 target 目录中，看到生成的 JaCoCo 单元测试报告网站了：</p><p><img src="https://czxcab.cn/file/docs/unit8.jpg" alt=""></p><p>打开网站的 index.html 文件，就能看到具体的测试报告结果，非常清晰：</p><p><img src="https://czxcab.cn/file/docs/unit9.jpg" alt=""></p><p>通常这种方式会更适用于企业中配置流水线来自动化生成测试报告的场景。</p>`,75),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","后端如何编写单元测试？.html.vue"]]),r=JSON.parse('{"path":"/docs/knowledgeShard/%E5%90%8E%E7%AB%AF%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%9F.html","title":"单元测试","lang":"zh-CN","frontmatter":{"title":"单元测试"},"headers":[{"level":2,"title":"什么是单元测试？","slug":"什么是单元测试","link":"#什么是单元测试","children":[]},{"level":2,"title":"为什么需要单元测试？","slug":"为什么需要单元测试","link":"#为什么需要单元测试","children":[]},{"level":2,"title":"如何编写单元测试？","slug":"如何编写单元测试","link":"#如何编写单元测试","children":[{"level":3,"title":"1、引入 JUnit","slug":"_1、引入-junit","link":"#_1、引入-junit","children":[]},{"level":3,"title":"2、编写单元测试","slug":"_2、编写单元测试","link":"#_2、编写单元测试","children":[]},{"level":3,"title":"3、生成测试报告","slug":"_3、生成测试报告","link":"#_3、生成测试报告","children":[]}]}],"git":{"updatedTime":1715061248000,"contributors":[{"name":"czx","email":"2504058202@qq.com","commits":1}]},"filePathRelative":"docs/knowledgeShard/后端如何编写单元测试？.md"}');export{k as comp,r as data};
