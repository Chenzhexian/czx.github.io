import{_ as e,o as a,c as s,e as d}from"./app-BoIshBAq.js";const l={},n=d(`<h2 id="第一章-初始mysql" tabindex="-1"><a class="header-anchor" href="#第一章-初始mysql"><span>第一章 初始MySQL</span></a></h2><h3 id="_1-1-mysql-的客户端-服务器架构" tabindex="-1"><a class="header-anchor" href="#_1-1-mysql-的客户端-服务器架构"><span>1.1 MySQL 的客户端/服务器架构</span></a></h3><p>MySQL分为<code>客户端</code>和<code>服务器</code>两个程序，它的服务器程序直接与要存储的数据打交道，多个客户端程序可以连接到这个服务器程序，向服务器发送增删改查的请求，然后服务器程序根据这些请求，对存储的数据进行相应处理。MySQL 的日常使用场景是下面这样的：</p><ol><li>启动 MySQL 服务器程序。</li><li>启动 MySQL 客户端程序，并连接到服务器程序。</li><li>在客户端程序中输入命令语句，并将其作为请求发送给服务器程序。服务器程序在收到这些请求后，根据请求的内容来操作具体的数据，并将结果返回给客户端。</li></ol><blockquote><p>MySQL 服务器程序的进程称为 MySQL 数据库实例( instance )</p></blockquote><h3 id="_1-2-mysql-的安装" tabindex="-1"><a class="header-anchor" href="#_1-2-mysql-的安装"><span>1.2 MySQL 的安装</span></a></h3><p>无论是通过下载源代码的方式自行编译安装 还是直接使用官方提供的安装包进行安装， MySQL 的服务器程序和客户端程序都会安装到机器上。</p><div class="custom-container warning"><p class="custom-container-title">一定一定一定要记住 MySQ 的安装目录</p></div><h4 id="_1-2-1-bin目录下的可执行文件" tabindex="-1"><a class="header-anchor" href="#_1-2-1-bin目录下的可执行文件"><span>1.2.1 bin目录下的可执行文件</span></a></h4><p>MySQL 的安装目录下有一个特别重要的 bin 目录，这个目录存放着许多可执行文件。这里仅列出了部分，如下图所示：</p><p><img src="https://czxcab.cn/file/docs/1705892867878.jpg" alt=""></p><p>MySQL可执行文件有很多，例如我们常用的 mysqld 文件，这些文件可以通过相对/绝对路径来调用，也可以配置环境变量，更方便地使用。</p><blockquote><p>配置环境变量大家应该都很熟悉，这里就不再赘述了。</p></blockquote><h3 id="_1-3-mysql服务器程序" tabindex="-1"><a class="header-anchor" href="#_1-3-mysql服务器程序"><span>1.3 MySQL服务器程序</span></a></h3><p>这节主要介绍 MySQL 一些常用服务器程序的作用，简单了解即可。</p><ol><li><p><code>mysqld</code> 可执行文件就表示MySQL服务器程序，运行这个可执行文件就可以直接启动一个MySQL服务器进程。</p></li><li><p><code>mysqld_safe</code> 是一个启动脚本，它会间接调用 <code>mysqld</code> 并持续监控服务器的运行状态。当服务器进程出现错误时，它还可以帮助重启服务器程序。另外，使用 <code>mysqld_safe</code> 启动MySQl服务器程序时，它会将服务器程序的出错信息和其他诊断信息输出到错误日志，以方便后期查找发生错误的原因。</p></li><li><p><code>mysqlserver</code> 也是一个启动脚本（其实是一个链接文件，实际文件是/supportfiles/mysqlserver），它会间接地调用 <code>mysqld_safe</code>。可以启动服务器程序，也可以停止服务器程序。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql.server start
mysql.server stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>mysqld_multi</code> 运行多个服务器实例，也就是运行多个MySQL服务器进程，也能报告它们的运行状态。</p></li></ol><h3 id="_1-4-启动-mysql客户端程序" tabindex="-1"><a class="header-anchor" href="#_1-4-启动-mysql客户端程序"><span>1.4 启动 MySQL客户端程序</span></a></h3><p>执行下面命令，即可启动 MySQL 客户端程序。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql -h主机名 -u用户名 -p密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-5-客户端与服务器连接的过程" tabindex="-1"><a class="header-anchor" href="#_1-5-客户端与服务器连接的过程"><span>1.5 客户端与服务器连接的过程</span></a></h3><p>MySQL支持下面几种客户端进程和服务器进程的通信方式</p><ul><li>TCP/IP</li><li>命名管道或共享内存</li><li>UNIX 域套接字</li></ul><h3 id="_1-6-服务器处理客户端请求" tabindex="-1"><a class="header-anchor" href="#_1-6-服务器处理客户端请求"><span>1.6 服务器处理客户端请求</span></a></h3><p>客户端进程向服务器进程发送一段SQL，服务器进程处理后再向客户端进程返回处理结果。那么 ，服务器进程对客户端迸程发送的请求做了什么处理，如下图所示：</p><p><img src="https://czxcab.cn/file/docs/1705894542234.jpg" alt=""></p><h3 id="_1-7-常用存储引擎" tabindex="-1"><a class="header-anchor" href="#_1-7-常用存储引擎"><span>1.7 常用存储引擎</span></a></h3><p>MySQL 服务器程序支持多种存储引擎，每种存储引擎都有自己的特点，MySQL支持的存储引擎看下图。</p><p><img src="https://czxcab.cn/file/docs/1705894677143.jpg" alt=""></p><h3 id="_1-8-关于存储引擎的一些操作" tabindex="-1"><a class="header-anchor" href="#_1-8-关于存储引擎的一些操作"><span>1.8 关于存储引擎的一些操作</span></a></h3><h4 id="_1-8-1-查看当前服务器程序支持的存储引擎" tabindex="-1"><a class="header-anchor" href="#_1-8-1-查看当前服务器程序支持的存储引擎"><span>1.8.1 查看当前服务器程序支持的存储引擎</span></a></h4><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>SHOW ENGINES;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用效果如下：</p><p><img src="https://czxcab.cn/file/docs/1705894969859.jpg" alt=""></p><ul><li><code>Support</code>列表示该存储引擎是否可用</li><li><code>DEFAULT</code> 值代表当前服务器程序的默认存储引擎</li><li><code>Comment</code> 列是对存储引擎的一个描述</li><li><code>Transactions</code> 列代表该存储引擎是否支持事务处理</li><li><code>XA</code> 列代表该存储引擎是否支持分布式事务</li><li><code>Savepoints</code> 列代表该存储引擎是否支持事务的部分回滚</li></ul><h4 id="_1-8-2-设置表的存储引擎" tabindex="-1"><a class="header-anchor" href="#_1-8-2-设置表的存储引擎"><span>1.8.2 设置表的存储引擎</span></a></h4><p>创建新表时使用:</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>CREATE TABLE 表名{
建表语句;
   } ENGINE = 存储引擎名称;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现有表要修改:</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>ALTER TABlE 表名 ENGINE = 存储引擎名称，
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第二章-mysql启动选项和系统变量" tabindex="-1"><a class="header-anchor" href="#第二章-mysql启动选项和系统变量"><span>第二章 MySQL启动选项和系统变量</span></a></h2><h3 id="_2-1-启动选顶和配置文件" tabindex="-1"><a class="header-anchor" href="#_2-1-启动选顶和配置文件"><span>2.1 启动选顶和配置文件</span></a></h3><p>简单来说，启动选项就是命令行参数，可以配置MySQL服务器程序的行为，也可以修改配置文件来实现。</p><h4 id="_2-1-1-在命令行上使用选项" tabindex="-1"><a class="header-anchor" href="#_2-1-1-在命令行上使用选项"><span>2.1.1 在命令行上使用选项</span></a></h4><p>禁止各客户端使用 TCP/IP网络进行通信</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysqld --skip-networking
<span class="token comment">#等价于</span>
mysqld <span class="token parameter variable">--skip_networking</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定启动选项时需要在选项名前加上<code>--</code>前缀</li><li>如果选项名是由多个单词构成的，它们之间可以由短划线<code>-</code>连接，也可以使用下划线<code>_</code>连接</li><li>选项名、=、选项值之间不可以有空白字符</li></ul><p><img src="https://czxcab.cn/file/docs/1705972190491.jpg" alt=""></p><h4 id="_2-1-2-配置文件中使用选项" tabindex="-1"><a class="header-anchor" href="#_2-1-2-配置文件中使用选项"><span>2.1.2 配置文件中使用选项</span></a></h4><p>在命令行中设置的启动选项只在当次启动生效，如果想让设置永久生效，就需要在配置文件中进行设置。</p><h5 id="_1-配置文件的路径" tabindex="-1"><a class="header-anchor" href="#_1-配置文件的路径"><span>1. 配置文件的路径</span></a></h5><p>windows操作系统下，MySQL会依次在下面几个目录中查找配置文件：</p><p><img src="https://czxcab.cn/file/docs/1705981853824.jpg" alt=""></p><ul><li>在给定的前3个路径中，配置文件可以使用<code>ini</code>的扩展名，也可以使用<code>cnf</code>的扩展名</li><li><code>%WINDIR%</code> 指的是你的机器上 Windows 目录的位置，可以使用 <code>echo %WINDIR%</code> 命令查看</li><li><code>BASEDIR</code> 指的 MySQL 安装目录的路径</li><li>第四个路径指的是在启动程序时可以通过指定 <code>defaults-extrn-file</code> 启动选项的值来添加额外的配置文件路径。比如，我们在命令行中可以这么写：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysqld --defaults-extra-file<span class="token operator">=</span>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>xiaohaizi4919<span class="token punctuation">\\</span>my_extrafile.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>%APPDATA%</code> 表示 Windows 应用程序数据目录的值，可以使用 <code>echo %APPDATA%</code> 命令查看</li><li>最后一个名为<code>mylogin.cnf</code>的配置文件它不是一个纯文本文件(其他的配置文件都是纯文本文件)，而是使用<code>mysql_config_editor</code>实用程序创建的加密文件。这个文件只能包含一些在启动客户端程序时用于连接服务器的选项，包括host、user、password、port 和 socket，而且它只能被客户端程序所使用。</li></ul><p>在类 UNIX 操作系统中，MySQL会依次在下面几个目录中查找配置文件：</p><p><img src="https://czxcab.cn/file/docs/1705987269336.jpg" alt=""><img src="https://czxcab.cn/file/docs/1705987284753.jpg" alt=""></p><h5 id="_2-配置文件的内容" tabindex="-1"><a class="header-anchor" href="#_2-配置文件的内容"><span>2. 配置文件的内容</span></a></h5><p>在配置文件中，我们会看到类似[server]、[mysqld]等这样的选项组，不同的选项组是给不同的程序使用的.如果选项组名称与程序名称相同，则组中的选项将专门应用于该程序，有两个比较特殊：</p><ul><li>[server] 组下面的启动选项将作用于所有的服务器程序</li><li>[client] 组下面的启动选项将作用于所有的客户端程序</li></ul><p><img src="https://czxcab.cn/file/docs/1705988496890.jpg" alt=""></p><h5 id="_3-特定mysql版本的专用选项组" tabindex="-1"><a class="header-anchor" href="#_3-特定mysql版本的专用选项组"><span>3. 特定MySQL版本的专用选项组</span></a></h5><p>我们可以在选项组的名称后加上特定的MySQL版本号。比如对于<code>[mysqld]</code>选项组来说我们可以定义一个<code>[mysqld-5.7]</code>的选项组。它的含义和<code>[mysqld]</code>一样，只不过只有版本号为<code>5.7</code>的mysqld程序才能使用这个选项组中的选项。</p><h5 id="_4-配置文件的优先级" tabindex="-1"><a class="header-anchor" href="#_4-配置文件的优先级"><span>4. 配置文件的优先级</span></a></h5><p>上面有提到了MySQL读取配置文件的顺序，如果我们在多个配置文件中设置了相同的选项，则以<strong>最后读取到的配置文件中的选项为准</strong>。</p><h5 id="_5-同一个配置文件中多个组的优先级" tabindex="-1"><a class="header-anchor" href="#_5-同一个配置文件中多个组的优先级"><span>5. 同一个配置文件中多个组的优先级</span></a></h5><p>同一个配置文件中不同选项组配置了相同的选项，<strong>以最后一个为准</strong>，比如下面这个配置文件以<code>[mysqld]</code>的配置为准</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>server<span class="token punctuation">]</span>
default-storage-engine<span class="token operator">=</span>InnoDB
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
default-storage-engine<span class="token operator">=</span>MyISAM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-defaults-file的使用" tabindex="-1"><a class="header-anchor" href="#_6-defaults-file的使用"><span>6. defaults-file的使用</span></a></h5><p>如果我们不想让MySQL到默认的路径下搜索配置文件，则可以在命令行指定<code>defaults-file</code>选项，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysqld --defaults-file-/tmp/myconfig.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样一来，在程序启动时将只在<code>/tmp/myconfig.txt</code>路径下搜索配置文件，如果文件不存在或无法访问，则会发生错误</p><div class="custom-container warning"><p class="custom-container-title">小贴士</p><p>注意<code>defaults-extra-file</code>和<code>defaults-file</code>的区别，使用<code>defaults-extra-fle</code>可以指定额外的配置文件路径(也就是说那些固定的配置文件路径也会被搜索)</p></div><h4 id="_2-1-3-在命令行和配置文件中启动选顶的区别" tabindex="-1"><a class="header-anchor" href="#_2-1-3-在命令行和配置文件中启动选顶的区别"><span>2.1.3 在命令行和配置文件中启动选顶的区别</span></a></h4><p>在命令行中指定的绝大部分启动选项都可以放到配置文件中，但是有一些选项是专门为命令行设计的，比如<code>defaults-extra-file</code>和<code>defaults-file</code>这样的选项本身就是为了指定配置文件路径的，如果再放在配置文件中就没啥意义了</p><p><strong>另外有一点需要特别注意</strong>:如果同一个启动选项既出现在命令行中，又出现在配置文件中，那么<strong>以命令行中的启动选项为准</strong>！</p><h3 id="_2-2-系统变量" tabindex="-1"><a class="header-anchor" href="#_2-2-系统变量"><span>2.2 系统变量</span></a></h3><h4 id="_2-2-1-系统变量简介" tabindex="-1"><a class="header-anchor" href="#_2-2-1-系统变量简介"><span>2.2.1 系统变量简介</span></a></h4><p>MySQL 服务器程序在运行过程中会用到许多影响程序行为的变量，它们被称为系统变量。比如，允许同时连入的客户端数量用系统变量<code>max_connections</code>表示;每个系统变量都有一个默认值，我们可以使用命令行或者配置文件中的选项在启动服务器时改变一些系统变量的值。大多数系统变量的值也可以在程序运行过程中修改，而无须停止并重新启动服务器。</p><h4 id="_2-2-2-查看系统变量" tabindex="-1"><a class="header-anchor" href="#_2-2-2-查看系统变量"><span>2.2.2 查看系统变量</span></a></h4><p>使用下面命令可以查看MySQL的系统变量，系统变量太多，想要找指定的可以加上 <code>like</code> 进行查询</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>show variables
show variables like &#39;max_connections&#39;
show variables like &#39;max_%&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://czxcab.cn/file/docs/1705993088059.jpg" alt=""></p><h4 id="_2-2-3-设置系统变量" tabindex="-1"><a class="header-anchor" href="#_2-2-3-设置系统变量"><span>2.2.3 设置系统变量</span></a></h4><h5 id="_1-通过启动选项设置" tabindex="-1"><a class="header-anchor" href="#_1-通过启动选项设置"><span>1. 通过启动选项设置</span></a></h5><p>就是上面说的两种设置方式，在命令行和配置文件中都可以设置。</p><h5 id="_2-服务器程序运行过程中设置" tabindex="-1"><a class="header-anchor" href="#_2-服务器程序运行过程中设置"><span>2. 服务器程序运行过程中设置</span></a></h5><p>(1) 设置不同作用范围的系统变量</p><p>系统变量分为两大类，一类是全面变量，另一类是会话变量。</p><ul><li><code>GLOBAL</code>(全局范围):影响服务器的整体操作。具有 <code>GLOBAL</code>作用范围的系统变量可以称为全面变量。</li><li><code>SESSION</code>(会话范围):影响某个客户端连接的操作。具有 <code>SESSION</code>作用范围的系统变量可以称为会话变量。</li></ul><p>简单来说<code>GLOBAL</code>范围的系统变量会影响到整个服务器程序，而<code>SESSION</code>范围的系统变量只影响当前客户端连接，换成大白话说就是，用户如果不去设置<code>SESSION</code>范围的系统变量，那就都按<code>GLOBAL</code>范围的来。</p><p>设置系统变量的语法:</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>SET [GLOBAL|SESSION] 系统变量名 = 值;
SET [@@(GLOBAL|SESSION).]系统变量名 = 值;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>#GLOBAL
SET GLOBAL default_storage_engine = MyISAM;
SET @@GLOBAL.default_storage_engine = MyISAM;
#SESSION
SET SESSION defau1t_storage_engine = MyISAM;
SET @@SESSION.defaulUtorage_engine=MyISAM;
SET default_storage_engine = MyISAM;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看出，如果在设置系统变量的语句中省略了作用范围，默认的作用范围就是<code>SESSION</code></p></blockquote><p>(2) 查看不同作用范围的系统变量 命令如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>SHOW [GLOBAL|SESSION] VARIABLES [LIKE &#39;系统变量名&#39;];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果使用<code>GLOBAL</code>修饰符，则显示全局系统变量的值。如果某个系统变量没有<code>GLOBAL</code>作用范围，则不显示它。</li><li>如果使用<code>SESSION</code>修饰符，则显示针对当前连接有效的系统变量值。如果某个系统变量没有<code>SESSION</code>作用范围，则显示<code>GLOBAL</code>作用范围的值。</li><li>如果没写修饰符，则与使用<code>SESSION</code>修饰符效果一样。</li></ul><div class="custom-container warning"><p class="custom-container-title">小贴士</p><p>如果某个客户端改变某个系统变量在<code>GLOBAL</code>作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为<code>SESSION</code>的值，只会影响后续连入的客户端作用范围<code>SESSION</code>的值</p></div><p>(3) 注意事项</p><ul><li>并不是所有的系统变量都具有<code>GLOBAL</code>和<code>SESSION</code>的作用范围。 <ul><li>有一些系统变量只具有<code>GLOBAL</code>作用范围，比如<code>max_connections</code></li><li>有一些系统变量只具有<code>SESSION</code>作用范围，比如<code>insert_id</code>，它表示在对某个包含<code>AUTO_INCREMENT</code>列的表进行插入时，该列初始的值。</li><li>有一些系统变量的值既具有<code>GLOBAL</code>作用范围，也具有<code>SESSION</code>作用范围，比如前面用到的<code>default_storage_engine</code>，大部分的系统变量都是这样的。</li></ul></li><li>有些系统变量是只读的，并不能设置值，比如<code>version</code></li></ul><h5 id="_3-启动选项和系统变量的区别" tabindex="-1"><a class="header-anchor" href="#_3-启动选项和系统变量的区别"><span>3. 启动选项和系统变量的区别</span></a></h5><ul><li>大部分的系统变量都可以当作启动选项传入</li><li>有些系统变量是在程序运行过程中自动生成的，不可以当作启动选项来设置，比如<code>character_set_client</code></li><li>有些启动选项也不是系统变量，比如<code>defaults-file</code></li></ul><h3 id="_2-3-状态变量" tabindex="-1"><a class="header-anchor" href="#_2-3-状态变量"><span>2.3 状态变量</span></a></h3><p>MySQL 服务器程序中维护了好多关于程序运行状态的变量。比如，<code>Treads_connected</code> 表示当前有多少客户端与服务器建立了连接; <code>Innodb_rows_updated</code> 表示更新了多少条以 Innodb 为存储引擎的表中的记录</p><p>状态变量和系统变量类似，也有<code>GLOBAL</code>和<code>SESSION</code>两种作用范围，使用语法也是一样的。</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>SHOW [GLOBAL|SESSION] STATUS[LIKE匹配的模式];
# 示例
SHOW STATUS LIKE &#39;thread%&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://czxcab.cn/file/docs/1706150272166.jpg" alt=""></p><h2 id="第三章-字符集和比较规则" tabindex="-1"><a class="header-anchor" href="#第三章-字符集和比较规则"><span>第三章 字符集和比较规则</span></a></h2><h3 id="_3-1-字符集和比较规则简介" tabindex="-1"><a class="header-anchor" href="#_3-1-字符集和比较规则简介"><span>3.1 字符集和比较规则简介</span></a></h3><h4 id="_3-1-1-字符集简介" tabindex="-1"><a class="header-anchor" href="#_3-1-1-字符集简介"><span>3.1.1 字符集简介</span></a></h4><p>计算机实际存储的是二进制数据，那他是怎么存储字符串的呢?当然是建立字符集，比如<code>ASCII</code>字符集，<code>GBK</code>字符集等。这些字符集的作用就是将字符和二进制数据建立映射关系。将字符映射成二进制数据的过程叫作编码，将二进制数据映射到字符的过程叫作解码</p><p>举个例子，<code>ASCII</code>字符集将字符<code>A</code>映射为二进制数据<code>01000001</code>，而<code>GBK</code>字符集将字符<code>A</code>映射为二进制数据<code>10000001 01000001</code>。</p><h4 id="_3-1-2-比较规则简介" tabindex="-1"><a class="header-anchor" href="#_3-1-2-比较规则简介"><span>3.1.2 比较规则简介</span></a></h4><p>如何比较两个字符串的大小呢?最简单的方法就是比较两个字符串的二进制数据，也称二进制比较规则。但是实际生活中我们有很多不同类型的字符，比如中文字符，比较这些字符就要使用不同的比较规则。</p><h4 id="_3-1-3-一些重要的字符集" tabindex="-1"><a class="header-anchor" href="#_3-1-3-一些重要的字符集"><span>3.1.3 一些重要的字符集</span></a></h4><ul><li><code>ASCII</code>字符集:共收录128个字符，由于<code>ASCII</code>字符集总共才 128 个字符，所以可以使用一个字节来进行编码。</li><li><code>ISO 8859-1</code>字符集:共收录 256个字符，它在ASCII字符集的基础上又扩充了128个西欧常用字符。<code>ISO 889-1</code>字符集也可以使用一个字节来进行编码。</li><li><code>GB2312</code>字符集:收录了汉字以及拉丁字母、希腊字母等。这种字符集同时又兼容<code>ASCII</code>字符集，所以在编码方式上显得有些奇怪:如果该字符在<code>ASCII</code>字符集中，则采用一字节编码，否则采用两字节编码。</li><li><code>GBK</code>字符集:<code>GBK</code>字符集只是在收录的字符范围上对 <code>GB2312</code>字符集进行了扩充，编码方式兼容<code>GB2312</code>字符集。</li><li><code>UTF-8</code>字符集:几乎收录了当今世界各个国家/地区使用的字符，兼容ASCII字符集，采用变长编码方式，编码一个字符时需要使用1~4字节。</li></ul><div class="custom-container tip"><p class="custom-container-title">补充说明</p><p>这里说到的一个字节其实就是8位，这里的位其实就是0或1，比如字符<code>A</code>使用一个字节来编码，二进制数据是<code>01000001</code>，数一下一共就是8位。</p></div><h3 id="_3-2-mysql中支持的字符集和比较规则" tabindex="-1"><a class="header-anchor" href="#_3-2-mysql中支持的字符集和比较规则"><span>3.2 MySQL中支持的字符集和比较规则</span></a></h3><h4 id="_3-2-1-mysql中的utf8和utf8mb4" tabindex="-1"><a class="header-anchor" href="#_3-2-1-mysql中的utf8和utf8mb4"><span>3.2.1 MySQL中的utf8和utf8mb4</span></a></h4><p>在MySQL中，字符集表示一个字符所用的最大字节长度在某些方面会影响系统的存储和性能。设计 MySOL的大叔“偷偷”地定义了下面两个概念</p><ul><li><code>utf8mb3</code>:“阉割”过的UTF-8 字符集，只使用1~3字节表示字符 (utf8是utf8mb3的别名)</li><li><code>utf8mb4</code>:正宗的UTF-8字符集，使用1~4字节表示字符。</li></ul><blockquote><p>在MySQL8.0中，设计MySQL的大叔已经很大程度地优化了 <code>utf8mb4</code> 字符集的性能，而且已经将其设置为默认的字符集。</p></blockquote><h4 id="_3-2-2-字符集的查看" tabindex="-1"><a class="header-anchor" href="#_3-2-2-字符集的查看"><span>3.2.2 字符集的查看</span></a></h4><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>SHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://czxcab.cn/file/docs/1706178739078.jpg" alt=""></p><p>注意返回结果中的最后一列<code>Maxlen</code>，它代表这种字符集最多需要几个字节来表示一个字符，下面是这几个常见的字符集:</p><p><img src="https://czxcab.cn/file/docs/1706178890798.jpg" alt=""></p><h4 id="_3-2-3-比较规则的查看" tabindex="-1"><a class="header-anchor" href="#_3-2-3-比较规则的查看"><span>3.2.3 比较规则的查看</span></a></h4><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>SHOW COLLATION [LIKE 匹配的模式]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比较规则的名称都是有规律的。比如<code>utf8_polish_ci</code>表示波兰语的比较规则，<code>utf8_spanish_ci</code>表示班牙语的比较规则;名称后缀意味着该比较规则是否区分语言中的重音、大小写等如下图</p><p><img src="https://czxcab.cn/file/docs/1706179247905.jpg" alt=""></p><h3 id="_3-3-字符集和比较规则的应用" tabindex="-1"><a class="header-anchor" href="#_3-3-字符集和比较规则的应用"><span>3.3 字符集和比较规则的应用</span></a></h3><h4 id="_3-3-1-各级别的字符集和比较规则" tabindex="-1"><a class="header-anchor" href="#_3-3-1-各级别的字符集和比较规则"><span>3.3.1 各级别的字符集和比较规则</span></a></h4><p>MySQL有4个级别的字符集和比较规则，分别是服务器级别、数据库级别、表级别、列级别。</p><h5 id="_1-服务器级别" tabindex="-1"><a class="header-anchor" href="#_1-服务器级别"><span>1. 服务器级别</span></a></h5><p>MySQL 提供了两个系统变量来表示服务器级别的字符集和比较规则</p><table><thead><tr><th>系统变量</th><th>描述</th></tr></thead><tbody><tr><td>character_set_server</td><td>服务器级别的字符集</td></tr><tr><td>collation_server</td><td>服务器级别的比较规则</td></tr></tbody></table><p>这两个系统变量可以通过启动选项或者在服务器程序运行过程中使用SET语句来修改这两个变量的值。也可以在配置文件中直接修改:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>server<span class="token punctuation">]</span>
<span class="token assign-left variable">character_set_server</span><span class="token operator">=</span>gbk
<span class="token assign-left variable">collation_server</span><span class="token operator">=</span>gbk_chinese_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-数据库级别" tabindex="-1"><a class="header-anchor" href="#_2-数据库级别"><span>2. 数据库级别</span></a></h5><p>创建和修改数据库时可以指定该数据库的字符集和比较规则:</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>[CREATE|ALTER] DATABASE 数据库名
[CHARACTER SET 字符集名称]
[COLLATE 比较规则名称];
# 示例
CREATE DATABASE db1
CHARACTER SET gbk
COLLATE gbk_chinese_ci;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看当前数据库使用的字符集和比较规则，可以查询下面两个变量，前提先切到对应数据库:</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>USE db1

SHOW VARIABLES LIKE &#39;character_set_database&#39;
SHOW VARIABLES LIKE &#39;collation_database&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>系统变量</th><th>描述</th></tr></thead><tbody><tr><td>character_set_database</td><td>当前数据库的字符集</td></tr><tr><td>collation_database</td><td>当前数据库的比较规则</td></tr></tbody></table><p>建数据库时如果没有指定字符集和比较规则，则使用服务器级别的字符集和比较规则。</p><h5 id="_3-表级别" tabindex="-1"><a class="header-anchor" href="#_3-表级别"><span>3. 表级别</span></a></h5><p>创建和修改表时可以指定该表的字符集和比较规则:</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>CREATE TABLE 表名 (列的信息)
[CHARACTER SET 字符集名称]
[COLLATE 比较规则名称]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果表创建时没有指定字符集和比较规则，则使用数据库级别的字符集和比较规则。</p><h5 id="_4-列级别" tabindex="-1"><a class="header-anchor" href="#_4-列级别"><span>4. 列级别</span></a></h5><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>CREATE TABLE 表名(
    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE比较规则名称]
        其他列...
);

ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET字符集名称] [COLLATE 比较规则名称];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和上面一样，如果没有指定列的字符集和比较规则，则使用表级别的字符集和比较规则。</p><div class="custom-container warning"><p class="custom-container-title">小贴士</p><p>在修改列的字符集时需要注意，如果列中存储的数据不能用修改后的字符集进行表示，则会发生错误。</p><p>比如，列最初使用的字符集是 <code>utf8</code>，列中存储了一些汉字，现在把列的字符集转换为<code>ascii</code> 的话就会出错，因为<code>ascii</code> 字符集并不能表示汉字字符。</p></div><h5 id="_5-仅修改字符集或仅修改比较规则" tabindex="-1"><a class="header-anchor" href="#_5-仅修改字符集或仅修改比较规则"><span>5. 仅修改字符集或仅修改比较规则</span></a></h5><ul><li>只修改字符集，则比较规则将变为修改后的字符集默认的比较规则</li><li>只修改比较规则，则字符集将变为修改后的比较规则对应的字符集</li></ul><h4 id="_3-3-2-客户端和服务器通信过程中使用的字符集" tabindex="-1"><a class="header-anchor" href="#_3-3-2-客户端和服务器通信过程中使用的字符集"><span>3.3.2 客户端和服务器通信过程中使用的字符集</span></a></h4><h5 id="_1-编码和解码使用的字符集不一致" tabindex="-1"><a class="header-anchor" href="#_1-编码和解码使用的字符集不一致"><span>1. 编码和解码使用的字符集不一致</span></a></h5><p>其实就是乱码的原因，比如你使用utf-8进行了编码，然后使用GBK进行解码，每种字符集中的字节都可能对应不同的字符所以就产生了乱码</p><h5 id="_2-字符集转换的概念" tabindex="-1"><a class="header-anchor" href="#_2-字符集转换的概念"><span>2. 字符集转换的概念</span></a></h5><p>如果一个程序接收到字节序列0xE68891，并按照<code>UTF-8</code>解码，然后再按照<code>GBK</code>编码，最终得到的字节序列是0xCED2。这个过程被称为字符集的转换。</p><h5 id="_3-mysql中的字符集转焕过程" tabindex="-1"><a class="header-anchor" href="#_3-mysql中的字符集转焕过程"><span>3. MySQL中的字符集转焕过程</span></a></h5><p>客户端在编码请求字符串时实际使用的字符集，与服务器在收到一个字节序列后认为该字节序列所采用的编码字符集，是两个独立的字符集。</p><h6 id="客户端发送请求" tabindex="-1"><a class="header-anchor" href="#客户端发送请求"><span>客户端发送请求</span></a></h6><ul><li><p>Linux操作系统下查看字符集</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token environment constant">$LC_ALL</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$LC_CTYPE</span>
<span class="token builtin class-name">echo</span> <span class="token environment constant">$LANG</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Windows操作系统下查看字符集</p><p>在Windows命令行窗口的标题栏上单击鼠标右键，选择<code>属性</code>，点击 <code>选项</code>，可以看到是GBK字符集 <img src="https://czxcab.cn/file/docs/1707185313252.jpg" alt=""></p></li></ul><h6 id="服务器接收请求" tabindex="-1"><a class="header-anchor" href="#服务器接收请求"><span>服务器接收请求</span></a></h6><p>服务器接收到的请求就是一个字节序列，它将这个字节序列看作是使用系统变量<code>character_set_ client</code>代表的字符集进行编码的字节序列（每个客户端与服务器建立连接后，服务器都会为该客户端维护一个单独 <code>character_set_client</code> 变量，这个变量是 <code>SESSION</code> 级别的）</p>`,167),i=[n];function c(t,o){return a(),s("div",null,i)}const p=e(l,[["render",c],["__file","《MySQL是怎样运行的》.html.vue"]]),h=JSON.parse('{"path":"/docs/readNote/%E3%80%8AMySQL%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84%E3%80%8B.html","title":"《MySQL是怎样运行的》","lang":"zh-CN","frontmatter":{"title":"《MySQL是怎样运行的》"},"headers":[{"level":2,"title":"第一章 初始MySQL","slug":"第一章-初始mysql","link":"#第一章-初始mysql","children":[{"level":3,"title":"1.1 MySQL 的客户端/服务器架构","slug":"_1-1-mysql-的客户端-服务器架构","link":"#_1-1-mysql-的客户端-服务器架构","children":[]},{"level":3,"title":"1.2 MySQL 的安装","slug":"_1-2-mysql-的安装","link":"#_1-2-mysql-的安装","children":[]},{"level":3,"title":"1.3 MySQL服务器程序","slug":"_1-3-mysql服务器程序","link":"#_1-3-mysql服务器程序","children":[]},{"level":3,"title":"1.4 启动 MySQL客户端程序","slug":"_1-4-启动-mysql客户端程序","link":"#_1-4-启动-mysql客户端程序","children":[]},{"level":3,"title":"1.5 客户端与服务器连接的过程","slug":"_1-5-客户端与服务器连接的过程","link":"#_1-5-客户端与服务器连接的过程","children":[]},{"level":3,"title":"1.6 服务器处理客户端请求","slug":"_1-6-服务器处理客户端请求","link":"#_1-6-服务器处理客户端请求","children":[]},{"level":3,"title":"1.7 常用存储引擎","slug":"_1-7-常用存储引擎","link":"#_1-7-常用存储引擎","children":[]},{"level":3,"title":"1.8 关于存储引擎的一些操作","slug":"_1-8-关于存储引擎的一些操作","link":"#_1-8-关于存储引擎的一些操作","children":[]}]},{"level":2,"title":"第二章 MySQL启动选项和系统变量","slug":"第二章-mysql启动选项和系统变量","link":"#第二章-mysql启动选项和系统变量","children":[{"level":3,"title":"2.1 启动选顶和配置文件","slug":"_2-1-启动选顶和配置文件","link":"#_2-1-启动选顶和配置文件","children":[]},{"level":3,"title":"2.2 系统变量","slug":"_2-2-系统变量","link":"#_2-2-系统变量","children":[]},{"level":3,"title":"2.3 状态变量","slug":"_2-3-状态变量","link":"#_2-3-状态变量","children":[]}]},{"level":2,"title":"第三章 字符集和比较规则","slug":"第三章-字符集和比较规则","link":"#第三章-字符集和比较规则","children":[{"level":3,"title":"3.1 字符集和比较规则简介","slug":"_3-1-字符集和比较规则简介","link":"#_3-1-字符集和比较规则简介","children":[]},{"level":3,"title":"3.2 MySQL中支持的字符集和比较规则","slug":"_3-2-mysql中支持的字符集和比较规则","link":"#_3-2-mysql中支持的字符集和比较规则","children":[]},{"level":3,"title":"3.3 字符集和比较规则的应用","slug":"_3-3-字符集和比较规则的应用","link":"#_3-3-字符集和比较规则的应用","children":[]}]}],"git":{"updatedTime":1707186084000,"contributors":[{"name":"czx","email":"2504058202@qq.com","commits":15}]},"filePathRelative":"docs/readNote/《MySQL是怎样运行的》.md"}');export{p as comp,h as data};
